/*
C MATLAB function: cutquot
 
USAGE: [(double) quot_num, (int64) quot_den,  (double) quot] = cutexp(sparse matrix (double) G, vector (int64) cut, vector (int64) quotweight);

PURPOSE: compute the cut quotient of a cut in G

NOTES: 
   - cut will be complemented if larger than half the vertices;
   - G is assumed to be undirected, no check for that
   - G is assumed to be sparse, program will check this
   - ASSUMING C LONG TYPE IS 64 BITS

ISSUES: REWRITE CUT PART IN C++. COMPLEMENTATION IS SCREWED UP.

mexFunction INPUTS;
   nrhs = 3
   nlhs = 3
   
*/
#include "mex.h"
#include "matrix.h"

void mexFunction (int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
  const mxArray* G;
  mwIndex* col;
  mwIndex* row;
  
  double* array_G;
  long* cut;
  long size_cut;
  long* qw;
  long weight_cut;
  long weight;
  long i, j;
  long n;
  double cutedges = 0;
  
  long* ccut;
  int* mask_cut; 
  mxArray* exp;
  
  mwSize dims[]={1,1}; 
  long* temp;

  /*%%%%%%%%%%%%%%%%% ARGUMENT LOADING &  CHECKING %%%%%%%%%%%%%%%%%%%%%*/

  /* CHECK CORRECT NUMBER OF INPUT/OUTPUTS */
  if(nrhs != 3 || nlhs != 3) 
    mexErrMsgTxt("Error in cutquot. Incorrect usage.\n");
  
  /* CHECK TYPES */
  if(!mxIsSparse(prhs[0]))
    mexErrMsgTxt("Error in cutquot. Graph must be sparse.\n");

  if(mxGetClassID(prhs[1]) != mxINT64_CLASS)
    mexErrMsgTxt("Error in cutquot. Cut must be of class int64.\n");

  if(mxGetClassID(prhs[2]) != mxINT64_CLASS)
    mexErrMsgTxt("Error in cutquot. quotweight must be of class int64.\n");

  if(mxGetM(prhs[2]) != mxGetM(prhs[0]))
     mexErrMsgTxt("Error in cutquot. quotweight must be of size equal to the number of vertices in the graph.");
     
  /* LOAD ARGUMENTS */
  G = prhs[0];
  n = mxGetM(G);
  col = mxGetJc(G);
  row = mxGetIr(G);
  array_G = mxGetPr(G);


  cut = (long*) mxGetPr(prhs[1]);
  size_cut = mxGetM(prhs[1]);
  qw = (long*) mxGetPr(prhs[2]);
    
  /*  COMPUTE TOTAL WEIGHT */
  weight = 0;
  for(i=0; i < n; i++) {
    if(qw[i] < 0) 
      mexErrMsgTxt("Error in quotweight. Weights must be nonnegative");
    weight += qw[i];
  }
  
  if(weight <= 0)
      mexErrMsgTxt("Error in quotweight. Some weight must be non-zero");

  
  /* PREPARE MASK - COMPLEMENT CUT IF NECESSARY, COMPLEMENT IF IT CONTAINS TOO MUCH WEIGHT */
  
  mask_cut = calloc(sizeof(*mask_cut), n+1);
  if (mask_cut == NULL)
    mexErrMsgTxt("Error allocating memory in cutexp.");

  weight_cut = 0;
  for(i=0; i < size_cut; i++){
      mask_cut[cut[i]] = 1;
      weight_cut += qw[cut[i]-1];
  }  
 

  if(weight_cut > weight/2)    /* COMPLEMENTATION */
    {
    for(i=1; i < n+1 ; i++)
      mask_cut[i] = !(mask_cut[i]);

    weight_cut = weight - weight_cut;

   j = 0;
   ccut = malloc(sizeof(*ccut)*( n - size_cut));  
   for(i=1; i < n+1; i++)
      {
	if(mask_cut[i]) {
	  ccut[j] = i;
	  j++;
	}
      } 
   if(j != n - size_cut)
     mexErrMsgTxt("Error in cutquot. What's going on?");

   size_cut = n - size_cut;
   cut = ccut;
   }
   
   
  


  if(size_cut == 0)
    mexErrMsgTxt("Error in cutquot. Invalid weights, cut has volume 0.");

  

  /* COMPUTE EXPANSION */
  for(i=0; i < size_cut; i++)
      for(j = col[cut[i]-1]; j < col[cut[i]]; j++) 
	  if(mask_cut[row[j] + 1] == 0)
	    cutedges += array_G[j];

  /*%%%%%%%%%%%%%%%%%%%%% TERMINATION AND CLEANING %%%%%%%%%%%%%%%%%%%%%%%%*/
  
  plhs[0] = mxCreateDoubleScalar(cutedges); 
  plhs[1] = mxCreateNumericArray(2, dims, mxINT64_CLASS, mxREAL);
  plhs[2] = mxCreateDoubleScalar(cutedges/weight_cut);  
  temp = (long*) mxGetPr(plhs[1]);
  temp[0] = weight_cut; 

  free(mask_cut);

} 



  


  
